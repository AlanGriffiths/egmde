/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from primary-selection-unstable-v1.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#ifndef MIR_FRONTEND_WAYLAND_PRIMARY_SELECTION_UNSTABLE_V1_XML_WRAPPER
#define MIR_FRONTEND_WAYLAND_PRIMARY_SELECTION_UNSTABLE_V1_XML_WRAPPER

#include <experimental/optional>

#include "mir/fd.h"
#include <wayland-server-core.h>

namespace mir
{
namespace wayland
{

class PrimarySelectionDeviceManagerV1
{
public:
    static char const constexpr* interface_name = "zwp_primary_selection_device_manager_v1";
    static int const interface_version = 1;

    static PrimarySelectionDeviceManagerV1* from(struct wl_resource*);

    PrimarySelectionDeviceManagerV1(struct wl_resource* resource);
    virtual ~PrimarySelectionDeviceManagerV1() = default;

    void destroy_wayland_object() const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Thunks;

    static bool is_instance(wl_resource* resource);

    class Global
    {
    public:
        Global(wl_display* display, uint32_t max_version);
        virtual ~Global();

        wl_global* const global;
        uint32_t const max_version;

    private:
        virtual void bind(wl_resource* new_zwp_primary_selection_device_manager_v1) = 0;
        friend PrimarySelectionDeviceManagerV1::Thunks;
    };

private:
    virtual void create_source(struct wl_resource* id) = 0;
    virtual void get_device(struct wl_resource* id, struct wl_resource* seat) = 0;
    virtual void destroy() = 0;
};

class PrimarySelectionDeviceV1
{
public:
    static char const constexpr* interface_name = "zwp_primary_selection_device_v1";
    static int const interface_version = 1;

    static PrimarySelectionDeviceV1* from(struct wl_resource*);

    PrimarySelectionDeviceV1(struct wl_resource* resource);
    virtual ~PrimarySelectionDeviceV1() = default;

    void send_data_offer_event(struct wl_resource* offer) const;
    void send_selection_event(std::experimental::optional<struct wl_resource*> const& id) const;

    void destroy_wayland_object() const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Opcode
    {
        static uint32_t const data_offer = 0;
        static uint32_t const selection = 1;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
    virtual void set_selection(std::experimental::optional<struct wl_resource*> const& source, uint32_t serial) = 0;
    virtual void destroy() = 0;
};

class PrimarySelectionOfferV1
{
public:
    static char const constexpr* interface_name = "zwp_primary_selection_offer_v1";
    static int const interface_version = 1;

    static PrimarySelectionOfferV1* from(struct wl_resource*);

    PrimarySelectionOfferV1(struct wl_resource* resource);
    virtual ~PrimarySelectionOfferV1() = default;

    void send_offer_event(std::string const& mime_type) const;

    void destroy_wayland_object() const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Opcode
    {
        static uint32_t const offer = 0;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
    virtual void receive(std::string const& mime_type, mir::Fd fd) = 0;
    virtual void destroy() = 0;
};

class PrimarySelectionSourceV1
{
public:
    static char const constexpr* interface_name = "zwp_primary_selection_source_v1";
    static int const interface_version = 1;

    static PrimarySelectionSourceV1* from(struct wl_resource*);

    PrimarySelectionSourceV1(struct wl_resource* resource);
    virtual ~PrimarySelectionSourceV1() = default;

    void send_send_event(std::string const& mime_type, mir::Fd fd) const;
    void send_cancelled_event() const;

    void destroy_wayland_object() const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Opcode
    {
        static uint32_t const send = 0;
        static uint32_t const cancelled = 1;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
    virtual void offer(std::string const& mime_type) = 0;
    virtual void destroy() = 0;
};

}
}

#endif // MIR_FRONTEND_WAYLAND_PRIMARY_SELECTION_UNSTABLE_V1_XML_WRAPPER
